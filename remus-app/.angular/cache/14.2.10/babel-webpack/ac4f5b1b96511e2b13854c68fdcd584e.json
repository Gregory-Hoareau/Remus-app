{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport Peer from 'peerjs';\nimport { PlayersService } from '../players/players.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../players/players.service\";\nexport let Peer2peerService = /*#__PURE__*/(() => {\n  class Peer2peerService {\n    constructor(playerServ) {\n      this.playerServ = playerServ; // Host peerServer info\n\n      this.host = '51.210.101.240';\n      this.path = '/remus-app';\n      this.port = 9000;\n    }\n\n    newpeer(id = undefined) {\n      this.peer = new Peer(id, {\n        host: this.host,\n        path: this.path,\n        port: this.port,\n        debug: 2\n      });\n      return this.peer;\n    }\n\n    openPeer(callback, params = undefined) {\n      this.peer.on('open', id => {\n        console.log('peer', this.peer, 'opened');\n        callback(params);\n      });\n    }\n\n    closePeer(callback, params = undefined) {\n      this.peer.on('close', () => {\n        callback(params);\n      });\n    }\n\n    connectPeer(callback, params = undefined) {\n      this.peer.on('connection', conn => {\n        callback(conn, params);\n      });\n    }\n\n    errorPeer(message, callback, params = undefined) {\n      this.peer.on('error', err => {\n        if (err.type === message) callback(params, err);\n      });\n    }\n\n    openConnection(conn, callback, params = undefined) {\n      conn.on('open', () => {\n        console.log('connection', conn.peer, 'opened');\n        callback(params);\n      });\n    }\n\n    newConnection(id, options = {\n      serialization: 'json'\n    }) {\n      console.log(\"trying to connect to \", id);\n      if (this.peer.connections[id]) return;\n      return this.peer.connect(id, options);\n    }\n\n    addConnectionAction(conn, callback, params = undefined) {\n      conn.on('data', data => {\n        callback(data, conn, params);\n      });\n    }\n\n    closeConnection(conn, callback, params = undefined) {\n      conn.on('close', () => {\n        callback(params);\n      });\n    }\n\n    shutDown() {\n      this.playerServ.getConns().forEach(con => {\n        con.close();\n      });\n      this.peer.disconnect();\n      this.peer.destroy();\n    }\n\n    rejoin() {\n      this.peer.reconnect();\n    }\n\n    myId() {\n      return this.peer.id;\n    }\n\n    sendMessage(content) {\n      return __awaiter(this, void 0, void 0, function* () {\n        console.log(\"sending \", content);\n        content.target.conn.send({\n          message: content.message\n        });\n        if (!this.playerServ.isHost) this.playerServ.getPlayerByName(\"Host\").conn.send({\n          message: content.message,\n          target: content.target.name\n        });\n        this.playerServ.getConv(content.target).addMessage(content);\n      });\n    }\n\n  }\n\n  Peer2peerService.ɵfac = function Peer2peerService_Factory(t) {\n    return new (t || Peer2peerService)(i0.ɵɵinject(i1.PlayersService));\n  };\n\n  Peer2peerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: Peer2peerService,\n    factory: Peer2peerService.ɵfac,\n    providedIn: 'root'\n  });\n  return Peer2peerService;\n})();","map":null,"metadata":{},"sourceType":"module"}