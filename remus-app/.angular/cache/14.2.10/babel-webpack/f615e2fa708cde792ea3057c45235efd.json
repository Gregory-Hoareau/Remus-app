{"ast":null,"code":"import { TRACKS, SOUNDS } from 'src/mocks/Track';\nimport { MusicControls } from '@ionic-native/music-controls/ngx';\nimport { Media } from '@ionic-native/media/ngx';\nimport { Platform } from '@ionic/angular';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic-native/music-controls/ngx\";\nimport * as i2 from \"@ionic-native/media/ngx\";\nimport * as i3 from \"@ionic/angular\";\nexport let MusicService = /*#__PURE__*/(() => {\n  class MusicService {\n    constructor(musicControls, media, plt) {\n      this.musicControls = musicControls;\n      this.media = media;\n      this.plt = plt; // Attributes link to background music\n\n      this.backgroundMusicTracks = TRACKS;\n      this.backgroundMusicIsPlaying = false;\n      this.backgroundCurrentTrack = null;\n      this.backgroundCurrentMediaFile = null;\n      this.backgroundPhoneTracks = []; // Attributes link to sound playing\n\n      this.soundboxTracks = SOUNDS;\n      this.soundPhoneTracks = [];\n      this.plt.ready().then(res => {\n        if (this.plt.is('android')) {\n          this.prefix = 'file:///android_asset/www/assets/music';\n        }\n      });\n    }\n\n    getSoundsTracks() {\n      return this.soundboxTracks;\n    }\n\n    getBackgroungTracks() {\n      return this.backgroundMusicTracks;\n    }\n\n    getBackgroundPhoneTracks() {\n      return this.backgroundPhoneTracks;\n    }\n\n    getSoundPhoneTracks() {\n      return this.soundPhoneTracks;\n    }\n\n    setBackgroundPhoneTracks(tracks) {\n      this.backgroundPhoneTracks = tracks;\n    }\n\n    setSoundPhoneTracks(tracks) {\n      this.soundPhoneTracks = tracks;\n    }\n\n    isBackgroundMusicPlaying() {\n      return this.backgroundMusicIsPlaying;\n    }\n\n    getCurrentTrack() {\n      return this.backgroundCurrentTrack;\n    }\n\n    initMusicControlNotif(song) {\n      this.musicControls.destroy();\n      this.musicControls.create({\n        track: song.name,\n        isPlaying: this.backgroundMusicIsPlaying,\n        dismissable: true,\n        hasPrev: true,\n        hasNext: true,\n        hasClose: true,\n        // Android only, optional\n        // text displayed in the status bar when the notification (and the ticker) are updated\n        ticker: 'Now playing \"' + song.name + '\"',\n        //All icons default to their built-in android equivalents\n        //The supplied drawable name, e.g. 'media_play', is the name of a drawable found under android/res/drawable* folders\n        playIcon: 'media_play',\n        pauseIcon: 'media_pause',\n        prevIcon: 'media_prev',\n        nextIcon: 'media_next',\n        closeIcon: 'media_close',\n        notificationIcon: 'notification'\n      }); // Action on click on Notification buttons\n\n      this.musicControls.subscribe().subscribe(action => {\n        const message = JSON.parse(action).message;\n\n        switch (message) {\n          case 'music-controls-next':\n            console.log('Clicked on Next');\n            this.next();\n            break;\n\n          case 'music-controls-previous':\n            console.log('Clicked on Prev');\n            this.previous();\n            break;\n\n          case 'music-controls-pause':\n            this.pause();\n            break;\n\n          case 'music-controls-play':\n            console.log('Clicked on Play');\n            this.resume();\n            break;\n\n          case 'music-controls-destroy':\n            console.log('Clicked on Destroy');\n            this.stop();\n            break;\n\n          default:\n            break;\n        }\n      });\n      this.musicControls.listen();\n    } // Background music methods\n\n\n    launchBackground(track) {\n      if (this.backgroundCurrentTrack) {\n        this.backgroundCurrentMediaFile.stop();\n      }\n\n      const path = this.backgroundMusicTracks.includes(track) ? this.prefix + track.path : track.path;\n      this.backgroundCurrentMediaFile = this.media.create(path); //To delete\n\n      console.log(this.backgroundCurrentMediaFile);\n      this.backgroundCurrentMediaFile.onStatusUpdate.subscribe(status => console.log(status));\n      this.backgroundCurrentMediaFile.onSuccess.subscribe(() => console.log('Action is successful'));\n      this.backgroundCurrentMediaFile.onError.subscribe(error => console.log('Error!', error));\n      this.backgroundCurrentMediaFile.play();\n      this.backgroundCurrentTrack = track;\n      this.backgroundMusicIsPlaying = true;\n      this.initMusicControlNotif(track);\n      this.musicControls.updateIsPlaying(true);\n    } // End launchBackground method\n\n\n    stop() {\n      this.backgroundCurrentMediaFile.stop();\n      this.backgroundCurrentMediaFile.release();\n      this.backgroundCurrentTrack = null;\n      this.backgroundMusicIsPlaying = false;\n    }\n\n    resume() {\n      this.backgroundCurrentMediaFile.play();\n      this.backgroundMusicIsPlaying = true;\n      this.musicControls.updateIsPlaying(true);\n    }\n\n    pause() {\n      this.backgroundCurrentMediaFile.pause();\n      this.backgroundMusicIsPlaying = false;\n      this.musicControls.updateIsPlaying(false);\n    }\n\n    next() {\n      const tracks = this.backgroundMusicTracks.includes(this.backgroundCurrentTrack) ? this.backgroundMusicTracks : this.backgroundPhoneTracks;\n      const nextTrackIndex = (tracks.indexOf(this.backgroundCurrentTrack) + 1) % tracks.length;\n      this.launchBackground(tracks[nextTrackIndex]);\n    }\n\n    previous() {\n      const tracks = this.backgroundMusicTracks.includes(this.backgroundCurrentTrack) ? this.backgroundMusicTracks : this.backgroundPhoneTracks;\n      let prevTrackIndex = tracks.indexOf(this.backgroundCurrentTrack) - 1;\n      prevTrackIndex = prevTrackIndex < 0 ? tracks.length - 1 : prevTrackIndex;\n      this.launchBackground(tracks[prevTrackIndex]);\n    } // End of Background music methods\n    //Soundbox methods\n\n\n    launchSound(sound) {\n      const path = this.soundboxTracks.includes(sound) ? this.prefix + sound.path : sound.path;\n      const s = this.media.create(path);\n      s.play();\n    }\n\n  }\n\n  MusicService.ɵfac = function MusicService_Factory(t) {\n    return new (t || MusicService)(i0.ɵɵinject(i1.MusicControls), i0.ɵɵinject(i2.Media), i0.ɵɵinject(i3.Platform));\n  };\n\n  MusicService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MusicService,\n    factory: MusicService.ɵfac,\n    providedIn: 'root'\n  });\n  return MusicService;\n})();","map":null,"metadata":{},"sourceType":"module"}