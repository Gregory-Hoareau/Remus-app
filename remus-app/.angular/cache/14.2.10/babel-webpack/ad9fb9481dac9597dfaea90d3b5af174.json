{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { ComponentFactoryResolver, ViewContainerRef } from '@angular/core';\nimport { AlertController, ModalController, LoadingController, ToastController, MenuController } from '@ionic/angular';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { DocPopupPage } from '../doc-popup/doc-popup.page';\nimport { CharacterSheetPage } from '../character-sheet/character-sheet.page';\nimport { File } from '@ionic-native/file/ngx';\nimport { PlayersService } from '../../providers/players/players.service';\nimport { SelectCharacterPage } from '../select-character/select-character.page';\nimport { SimulateurPage } from '../simulateur/simulateur.page';\nimport { faDiceD20, faTrophy, faPeopleArrows, faCrown, faMusic, faFeather } from '@fortawesome/free-solid-svg-icons';\nimport { AchivementService } from '../../providers/achivement/achivement.service';\nimport { NotesPage } from '../notes/notes.page';\nimport { NotesService } from '../../providers/notes/notes.service';\nimport { Player } from 'src/app/models/player.models';\nimport { AchivementPage } from '../achivement/achivement.page';\nimport { Location } from '@angular/common';\nimport { CrowdsourcingPage } from '../crowdsourcing/crowdsourcing.page';\nimport { CharacterService } from 'src/app/providers/character/character.service';\nimport { InvitationSenderPage } from '../invitation-sender/invitation-sender.page';\nimport { Peer2peerService } from 'src/app/providers/peer2peer/peer2peer.service';\nimport { SharedFileComponent } from 'src/app/components/shared-file/shared-file.component';\nimport { GeneratorChoicePage } from '../name-generator/generator-choice/generator-choice.page';\nimport { MusicPlayerPage } from '../music-player/music-player.page';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../providers/achivement/achivement.service\";\nimport * as i2 from \"@ionic/angular\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@ionic-native/file/ngx\";\nimport * as i5 from \"../../providers/players/players.service\";\nimport * as i6 from \"../../providers/notes/notes.service\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"src/app/providers/character/character.service\";\nimport * as i9 from \"src/app/providers/peer2peer/peer2peer.service\";\nimport * as i10 from \"@fortawesome/angular-fontawesome\";\nconst _c0 = [\"sharedfilecontainer\"];\n\nfunction SessionHomePage_fa_icon_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"fa-icon\", 28);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"icon\", ctx_r0.crown);\n  }\n}\n\nfunction SessionHomePage_ion_button_37_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"ion-button\", 29);\n    i0.ɵɵlistener(\"click\", function SessionHomePage_ion_button_37_Template_ion_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.openAnyModal(ctx_r4.SelectCharacterPage));\n    });\n    i0.ɵɵtext(1, \"Mes Personnages\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction SessionHomePage_ion_button_38_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"ion-button\", 29);\n    i0.ɵɵlistener(\"click\", function SessionHomePage_ion_button_38_Template_ion_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.openAnyModal(ctx_r6.CharacterSheetPage, {\n        character: ctx_r6.playerServ.myPlayer.character,\n        edited: ctx_r6.playerServ.playersList[0]\n      }, ctx_r6.characterModalDismiss, ctx_r6.playerServ.myPlayer));\n    });\n    i0.ɵɵtext(1, \"Mon personnage\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let SessionHomePage = /*#__PURE__*/(() => {\n  class SessionHomePage {\n    constructor(resolver, achivementService, modalCtr, route, router, alerteController, loadingController, file, playerServ, toastController, menuController, noteService, location, characterService, peerService) {\n      this.resolver = resolver;\n      this.achivementService = achivementService;\n      this.modalCtr = modalCtr;\n      this.route = route;\n      this.router = router;\n      this.alerteController = alerteController;\n      this.loadingController = loadingController;\n      this.file = file;\n      this.playerServ = playerServ;\n      this.toastController = toastController;\n      this.menuController = menuController;\n      this.noteService = noteService;\n      this.location = location;\n      this.characterService = characterService;\n      this.peerService = peerService; // Accessible pages\n\n      this.SelectCharacterPage = SelectCharacterPage;\n      this.DocPopupPage = DocPopupPage;\n      this.CharacterSheetPage = CharacterSheetPage;\n      this.NotesPage = NotesPage;\n      this.SimulateurPage = SimulateurPage;\n      this.AchivementPage = AchivementPage;\n      this.InvitationSenderPage = InvitationSenderPage;\n      this.CrowdsourcingPage = CrowdsourcingPage;\n      this.GeneratorChoicePage = GeneratorChoicePage;\n      this.MusicPlayerPage = MusicPlayerPage; // Host peerServer info\n\n      this.host = '51.210.101.240';\n      this.path = '/remus-app';\n      this.port = 9000;\n      this.imgTemp = '';\n      this.diceIcon = faDiceD20;\n      this.trophyIcon = faTrophy;\n      this.crowdsourcing = faPeopleArrows;\n      this.crown = faCrown;\n      this.generator = faFeather;\n      this.music = faMusic;\n      this.menuController.enable(true, 'playerList');\n      this.menuController.enable(false, 'mainMenu');\n    }\n\n    ngOnInit() {\n      //initialise variables.\n      if (this.route.queryParams) {\n        console.log(this.route.queryParams);\n        this.route.queryParams.subscribe(params => {\n          if (this.router.getCurrentNavigation().extras.state) {\n            this.roomName = this.router.getCurrentNavigation().extras.state.name;\n            this.description = this.router.getCurrentNavigation().extras.state.description;\n            this.pseudo = this.router.getCurrentNavigation().extras.state.pseudo;\n            this.roomid = this.router.getCurrentNavigation().extras.state.id;\n          } else {\n            this.location.back();\n          }\n        });\n      } // initialise Peer\n\n\n      this.peer = this.peerService.newpeer(Math.random().toString(36).substr(2, 5));\n\n      if (this.roomid || this.roomName) {\n        if (!this.roomName) {\n          this.playerServ.isHost = false; // Peers trying to join\n\n          this.roomName = 'Salle d\\'attente';\n          this.peerService.openPeer(function (params) {\n            // connect to host peer\n            const conn = params.peerService.newConnection(params.roomid);\n            params.peerService.openConnection(conn, params => {\n              params.breakTimeout();\n              conn.send({\n                newPlayer: params.pseudo\n              });\n            }, params);\n            params.peerService.addConnectionAction(conn, (data, conn, params) => {\n              params.treatData(data, conn, params);\n            }, params);\n            params.peerService.closeConnection(conn, params => {\n              params.createDisconnectionTimeout(\"L'hôte à quité la partie.\");\n              params.playerServ.resetPlayer();\n            }, params);\n            params.createDisconnectionTimeout(\"Connection échoué. Veuillez réessayer.\", 10000);\n          }, this);\n          this.peerService.errorPeer('peer-unavailable', (params, err) => {\n            console.log(\"caught error\", err);\n            params.breakTimeout();\n            params.makeKickAlert('id ' + params.roomid + ' ne correspond a aucune salle.');\n          }, this);\n        } else {\n          // Initialise hosting\n          this.pseudo = 'host';\n          this.roomid = this.peerService.myId();\n          this.playerServ.isHost = true;\n          this.peerService.openPeer(params => {\n            this.makeAnIdAlert(params);\n          }, this.roomid);\n        }\n\n        this.peerService.connectPeer((conn, params) => {\n          params.peerService.addConnectionAction(conn, (data, conn, params) => {\n            params.treatData(data, conn, params);\n          }, params);\n          params.peerService.openConnection(conn, params => {\n            console.log('opened connection with ', conn);\n          });\n          params.peerService.closeConnection(conn, params => {\n            const p = params.playerServ.getPlayerById(conn.peer);\n            params.playerServ.removePlayer(p);\n            params.createTicket(p.name + ' a quité la salle'); // Notify players\n\n            params.toastController.create({\n              duration: 2000,\n              message: p.name + ' a quité la salle',\n              position: \"top\"\n            }).then(toast => {\n              toast.present();\n            });\n            console.log(p.name, \" has left.\");\n          }, params);\n        }, this);\n        this.playerServ.myPlayer.name = this.pseudo;\n      }\n    }\n\n    ionViewWillLeave() {\n      this.playerServ.isHost = false;\n      this.menuController.enable(false, 'playerList');\n      this.menuController.enable(true, 'mainMenu');\n      this.noteService.reset();\n      this.peerService.shutDown(); // reset shared files\n\n      if (this.file.listDir(this.file.dataDirectory, '')) {\n        this.file.listDir(this.file.dataDirectory, '').then(listing => {\n          for (const files of listing) {\n            if (files.isFile === true) {\n              this.file.removeFile(this.file.dataDirectory, files.name);\n              console.log('This is a file');\n            }\n          }\n        });\n      }\n\n      this.breakTimeout();\n    }\n\n    createDisconnectionTimeout(reason, time = 5000) {\n      this.currentTimeout = setTimeout(() => {\n        this.makeKickAlert(reason);\n      }, time);\n    }\n\n    breakTimeout() {\n      clearTimeout(this.currentTimeout);\n    }\n\n    createTicket(message) {\n      const node = document.createElement('ION-CARD');\n      node.setAttribute('color', 'old-paper');\n      node.appendChild(document.createTextNode(message));\n      document.getElementById('mainContent').appendChild(node);\n    }\n\n    openAnyModal(component, componentProps = {}, dismiss = () => {}, params = undefined) {\n      this.modalCtr.create({\n        component: component,\n        swipeToClose: true,\n        componentProps: componentProps\n      }).then(modal => {\n        modal.onWillDismiss().then(dataReturned => {\n          dismiss(dataReturned, params);\n        });\n        modal.present();\n      });\n    }\n\n    docModalDismiss(dataReturned, params) {\n      if (dataReturned.data) {\n        console.log(dataReturned.data); //this.entry.clear();\n\n        const factory = params.resolver.resolveComponentFactory(SharedFileComponent);\n        const componentRef = params.entry.createComponent(factory);\n        componentRef.instance.image = dataReturned.data;\n        const navigationExtras = {\n          state: dataReturned.data\n        };\n      }\n    }\n\n    achievementModalDismiss(dataReturned) {\n      if (dataReturned !== null && dataReturned.data !== '') {\n        const navigationExtras = {\n          state: dataReturned.data\n        };\n      }\n    }\n\n    characterModalDismiss(dataReturned, params) {\n      if (dataReturned !== null && dataReturned.data !== '') {\n        params.character = dataReturned.data;\n      }\n    }\n\n    makeAnIdAlert(id) {\n      this.alerteController.create({\n        header: 'Nouvelle partie !',\n        message: id,\n        cssClass: 'new_id',\n        buttons: [{\n          text: 'Ok',\n          role: 'Ok',\n          cssClass: 'buttons',\n          handler: () => {}\n        }]\n      }).then(alert => {\n        alert.present();\n      });\n    }\n\n    makeApprovalAlert(player, conn) {\n      this.alerteController.create({\n        header: 'Nouveau joueur !',\n        message: player,\n        buttons: [{\n          text: 'approuver',\n          role: 'join',\n          handler: () => {\n            this.createTicket(player + ' a rejoint la salle');\n            conn.send({\n              roomName: this.roomName,\n              roomDesc: this.description\n            });\n            conn.send({\n              template: this.characterService.getTemplate()\n            });\n            conn.send({\n              customSheet: this.characterService.getCustomSheet()\n            }); // Send old players info to new player\n\n            this.playerServ.playersList.forEach(player => {\n              conn.send({\n                newPlayer: player.name,\n                peer: player.conn.peer\n              });\n            }); // Send new player info to old players\n\n            this.playerServ.getConns().forEach(con => {\n              con.send({\n                newPlayer: player,\n                peer: conn.peer\n              });\n            }); // Add new player to peronnal player list\n\n            this.playerServ.playersList.push(new Player(conn, player));\n          }\n        }, {\n          text: 'refuser',\n          role: 'kick',\n          handler: () => {\n            conn.send({\n              kick: 'accès refusé'\n            });\n          }\n        }]\n      }).then(alert => {\n        alert.present();\n      });\n    }\n\n    makeKickAlert(reason) {\n      this.alerteController.create({\n        header: 'Vous avez été viré de la partie',\n        message: 'Raison : ' + reason,\n        buttons: [{\n          text: 'Ok',\n          handler: () => {\n            this.location.back();\n          }\n        }]\n      }).then(alert => {\n        alert.present();\n      });\n    }\n\n    makeLoader() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.loader = yield this.loadingController.create({\n          message: 'En attente de la réponse de l\\'hote'\n        });\n      });\n    }\n\n    treatData(data, conn = undefined) {\n      console.log(\"recieved data:\", data, \"from\", conn.peer); // Treat given data\n\n      if (data.roomName) {\n        this.roomName = data.roomName;\n        this.playerServ.playersList.push(new Player(conn));\n      }\n\n      if (data.roomDesc) {\n        this.description = data.roomDesc;\n      }\n\n      if (data.newPlayer) {\n        if (this.playerServ.isHost) {\n          this.makeApprovalAlert(data.newPlayer, conn);\n        } else {\n          const con = this.peerService.newConnection(data.peer);\n          this.peerService.openConnection(con, params => {\n            // informe player name\n            this.playerServ.playersList.push(new Player(con, params.newPlayer));\n            console.log('Openned connection with ', params.newPlayer);\n            this.createTicket(params.newPlayer + ' a rejoint la salle');\n          }, data);\n          this.peerService.addConnectionAction(conn, (data, conn, params) => {\n            params.treatData(data, conn, params);\n          }, this);\n        }\n      }\n\n      if (data.kick) {\n        this.makeKickAlert(data.kick);\n      }\n\n      if (data.imgPart) {\n        this.imgTemp = this.imgTemp + data.imgPart;\n      }\n\n      if (data.imgEnd) {\n        const p = this.playerServ.getPlayerById(conn.peer);\n        this.imgTemp = this.imgTemp + data.imgEnd[1];\n        this.file.createFile(this.file.dataDirectory, data.imgEnd[0], true).then();\n        this.file.writeExistingFile(this.file.dataDirectory, data.imgEnd[0], this.imgTemp).then();\n        this.imgTemp = '';\n        this.toastController.create({\n          position: 'top',\n          duration: 3000,\n          message: p.name + ' a partagé un nouveau document :\\n' + data.imgEnd[0]\n        }).then(toast => {\n          toast.present();\n        });\n      }\n\n      if (data.message) {\n        let p;\n        p = this.playerServ.getPlayerById(conn.peer);\n        console.log('recieved message : ', data.message, ' from ', p, ' directed to ', data.target);\n\n        if (data.target) {\n          if (data.target != 'Host') this.playerServ.getConv(p).addMessage({\n            timestamp: new Date(),\n            player: p,\n            message: data.message,\n            target: this.playerServ.getPlayerByName(data.target)\n          });\n        } else {\n          this.playerServ.getConv(p).addMessage({\n            timestamp: new Date(),\n            player: p,\n            message: data.message,\n            target: this.playerServ.me()\n          });\n          console.log(\"talkign me :\", this.playerServ.me());\n        }\n\n        this.toastController.create({\n          message: p.name + ' vous a envoyé une message :\\n' + data.message,\n          duration: 2000,\n          position: 'top'\n        }).then(toast => {\n          toast.present();\n        });\n      }\n\n      if (data.achivement) {\n        this.achivementService.achivements.push({\n          titre: data.achivement,\n          description: data.description,\n          checked: false\n        });\n        this.achivementService.setUpAvancee();\n      }\n\n      if (data.achivementPartage !== undefined) {\n        this.achivementService.partage = data.achivementPartage;\n      }\n\n      if (data.achivementValide) {\n        this.achivementService.validAchivement(data.achivementValide);\n        this.achivementService.setUpAvancee();\n      }\n\n      if (data.removeAchivement) {\n        this.achivementService.remove(data.removeAchivement);\n      }\n\n      if (data.template) {\n        this.characterService.setTemplate(data.template);\n      }\n\n      if (data.customSheet) {\n        this.characterService.setCustomSheet(data.customSheet);\n      }\n\n      if (data.sheet) {\n        //if (this.isHost)\n        this.playerServ.getPlayerById(conn.peer).character = data.sheet; //else\n\n        this.playerServ.myPlayer.character = data.sheet;\n      }\n    }\n\n    navigateToChar() {\n      this.router.navigate(['character-sheet']);\n    }\n\n  }\n\n  SessionHomePage.ɵfac = function SessionHomePage_Factory(t) {\n    return new (t || SessionHomePage)(i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver), i0.ɵɵdirectiveInject(i1.AchivementService), i0.ɵɵdirectiveInject(i2.ModalController), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i2.AlertController), i0.ɵɵdirectiveInject(i2.LoadingController), i0.ɵɵdirectiveInject(i4.File), i0.ɵɵdirectiveInject(i5.PlayersService), i0.ɵɵdirectiveInject(i2.ToastController), i0.ɵɵdirectiveInject(i2.MenuController), i0.ɵɵdirectiveInject(i6.NotesService), i0.ɵɵdirectiveInject(i7.Location), i0.ɵɵdirectiveInject(i8.CharacterService), i0.ɵɵdirectiveInject(i9.Peer2peerService));\n  };\n\n  SessionHomePage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SessionHomePage,\n    selectors: [[\"app-home\"]],\n    viewQuery: function SessionHomePage_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7, ViewContainerRef);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.entry = _t.first);\n      }\n    },\n    decls: 41,\n    vars: 13,\n    consts: [[3, \"translucent\"], [\"color\", \"header\"], [\"slot\", \"end\"], [\"menu\", \"playerList\"], [\"name\", \"person\", \"slot\", \"icon-only\"], [1, \"hcs\"], [\"class\", \"realSmall\", \"style\", \"color: #8E99ED\", 3, \"icon\", 4, \"ngIf\"], [2, \"font-family\", \"'Playfair display',serif\"], [\"color\", \"btn-purple\", 3, \"click\"], [\"name\", \"person-add\"], [\"id\", \"mainContent\", 1, \"flex\", 3, \"fullscreen\"], [\"color\", \"old-paper\"], [\"sharedfilecontainer\", \"\"], [\"vertical\", \"bottom\", \"horizontal\", \"end\", \"slot\", \"fixed\"], [\"color\", \"btn-purple\"], [\"name\", \"arrow-up-circle\"], [\"side\", \"top\"], [\"color\", \"btn-purple\", \"data-desc\", \"Lanceur de d\\u00E9s\", 1, \"dice\", 3, \"click\"], [1, \"icon\", 3, \"icon\"], [\"color\", \"btn-purple\", \"data-desc\", \"Notes\", 1, \"dice\", 3, \"click\"], [\"name\", \"create-outline\"], [\"color\", \"btn-purple\", \"data-desc\", \"Succ\\u00E8s\", 1, \"dice\", 3, \"click\"], [\"color\", \"btn-purple\", \"data-desc\", \"Communaut\\u00E9\", 1, \"dice\", 3, \"click\"], [\"color\", \"btn-purple\", \"data-desc\", \"G\\u00E9n\\u00E9rateur de nom\", 1, \"dice\", 3, \"click\"], [\"color\", \"btn-purple\", \"data-desc\", \"Musique\", 1, \"dice\", 3, \"click\"], [\"color\", \"header\", \"id\", \"end\"], [\"color\", \"btn-purple\", \"id\", \"ButtonPerso\", 3, \"click\", 4, \"ngIf\"], [\"id\", \"ButtonDoc\", \"color\", \"btn-purple\", 3, \"click\"], [1, \"realSmall\", 2, \"color\", \"#8E99ED\", 3, \"icon\"], [\"color\", \"btn-purple\", \"id\", \"ButtonPerso\", 3, \"click\"]],\n    template: function SessionHomePage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\", 0)(1, \"ion-toolbar\", 1)(2, \"ion-buttons\", 2)(3, \"ion-menu-toggle\", 3)(4, \"ion-button\");\n        i0.ɵɵelement(5, \"ion-icon\", 4);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(6, \"div\", 5);\n        i0.ɵɵtemplate(7, SessionHomePage_fa_icon_7_Template, 1, 1, \"fa-icon\", 6);\n        i0.ɵɵelementStart(8, \"ion-title\", 7);\n        i0.ɵɵtext(9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"ion-button\", 8);\n        i0.ɵɵlistener(\"click\", function SessionHomePage_Template_ion_button_click_10_listener() {\n          return ctx.openAnyModal(ctx.InvitationSenderPage, {\n            roomid: ctx.roomid\n          });\n        });\n        i0.ɵɵelement(11, \"ion-icon\", 9);\n        i0.ɵɵtext(12);\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(13, \"ion-content\", 10)(14, \"ion-card\", 11);\n        i0.ɵɵtext(15);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"template\", null, 12);\n        i0.ɵɵtext(18, \"\\n  \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"ion-fab\", 13)(20, \"ion-fab-button\", 14);\n        i0.ɵɵelement(21, \"ion-icon\", 15);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"ion-fab-list\", 16)(23, \"ion-fab-button\", 17);\n        i0.ɵɵlistener(\"click\", function SessionHomePage_Template_ion_fab_button_click_23_listener() {\n          return ctx.openAnyModal(ctx.SimulateurPage, {\n            isModal: true\n          });\n        });\n        i0.ɵɵelement(24, \"fa-icon\", 18);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"ion-fab-button\", 19);\n        i0.ɵɵlistener(\"click\", function SessionHomePage_Template_ion_fab_button_click_25_listener() {\n          return ctx.openAnyModal(ctx.NotesPage);\n        });\n        i0.ɵɵelement(26, \"ion-icon\", 20);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(27, \"ion-fab-button\", 21);\n        i0.ɵɵlistener(\"click\", function SessionHomePage_Template_ion_fab_button_click_27_listener() {\n          return ctx.openAnyModal(ctx.AchivementPage, {}, ctx.achievementModalDismiss);\n        });\n        i0.ɵɵelement(28, \"fa-icon\", 18);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(29, \"ion-fab-button\", 22);\n        i0.ɵɵlistener(\"click\", function SessionHomePage_Template_ion_fab_button_click_29_listener() {\n          return ctx.openAnyModal(ctx.CrowdsourcingPage, {\n            modal: true\n          });\n        });\n        i0.ɵɵelement(30, \"fa-icon\", 18);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(31, \"ion-fab-button\", 23);\n        i0.ɵɵlistener(\"click\", function SessionHomePage_Template_ion_fab_button_click_31_listener() {\n          return ctx.openAnyModal(ctx.GeneratorChoicePage);\n        });\n        i0.ɵɵelement(32, \"fa-icon\", 18);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(33, \"ion-fab-button\", 24);\n        i0.ɵɵlistener(\"click\", function SessionHomePage_Template_ion_fab_button_click_33_listener() {\n          return ctx.openAnyModal(ctx.MusicPlayerPage);\n        });\n        i0.ɵɵelement(34, \"fa-icon\", 18);\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(35, \"ion-footer\")(36, \"ion-toolbar\", 25);\n        i0.ɵɵtemplate(37, SessionHomePage_ion_button_37_Template, 2, 0, \"ion-button\", 26);\n        i0.ɵɵtemplate(38, SessionHomePage_ion_button_38_Template, 2, 0, \"ion-button\", 26);\n        i0.ɵɵelementStart(39, \"ion-button\", 27);\n        i0.ɵɵlistener(\"click\", function SessionHomePage_Template_ion_button_click_39_listener() {\n          return ctx.openAnyModal(ctx.DocPopupPage, {}, ctx.docModalDismiss, ctx);\n        });\n        i0.ɵɵtext(40, \"Documents partag\\u00E9s\");\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"translucent\", true);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngIf\", ctx.playerServ.isHost);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", ctx.roomName, \" \");\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\" \", ctx.roomid, \" \");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"fullscreen\", true);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", ctx.description, \" \");\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"icon\", ctx.diceIcon);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"icon\", ctx.trophyIcon);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"icon\", ctx.crowdsourcing);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"icon\", ctx.generator);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"icon\", ctx.music);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.playerServ.isHost);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.playerServ.isHost);\n      }\n    },\n    dependencies: [i7.NgIf, i2.IonButton, i2.IonButtons, i2.IonCard, i2.IonContent, i2.IonFab, i2.IonFabButton, i2.IonFabList, i2.IonFooter, i2.IonHeader, i2.IonIcon, i2.IonMenuToggle, i2.IonTitle, i2.IonToolbar, i10.FaIconComponent],\n    styles: [\"ion-content[_ngcontent-%COMP%]{--background: #fff url(wood.png) no-repeat center center / cover}#container[_ngcontent-%COMP%]{text-align:center;position:absolute;left:0;right:0;top:50%;transform:translateY(-50%)}#container[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%]{font-size:20px;line-height:26px}#container[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{font-size:16px;line-height:22px;color:#8c8c8c;margin:0}#container[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{text-decoration:none}#end[_ngcontent-%COMP%]   #ButtonPerso[_ngcontent-%COMP%]{font-size:10px;float:left;max-width:50%;width:49%}#end[_ngcontent-%COMP%]   #ButtonDoc[_ngcontent-%COMP%]{width:48%;font-size:10px;float:right;max-width:48%}.container[_ngcontent-%COMP%]{display:flex;justify-content:center;position:relative}.container[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{align-self:center}.container[_ngcontent-%COMP%]   .btn[_ngcontent-%COMP%]{z-index:2;position:absolute;color:red;top:5%;left:90%;transform:translate(-50%,-50%);-ms-transform:translate(-50%,-50%);cursor:pointer;margin:auto;font-size:5px}.container[_ngcontent-%COMP%]   .brushbtn[_ngcontent-%COMP%]{z-index:2;position:absolute;color:#000;bottom:0%;left:90%;transform:translate(-50%,-50%);-ms-transform:translate(-50%,-50%);font-size:5px;cursor:pointer;margin:auto}.realSmall[_ngcontent-%COMP%]{width:25px;height:25px}.hcs[_ngcontent-%COMP%]{display:flex;flex-direction:row;align-items:center;margin-left:20px}.dice[_ngcontent-%COMP%]{font-size:x-large}.icon[_ngcontent-%COMP%]{color:#000}ion-fab-button[data-desc][_ngcontent-%COMP%]{position:relative}ion-fab-button[data-desc][_ngcontent-%COMP%]:after{position:absolute;content:attr(data-desc);z-index:1;right:90%;bottom:10%;padding:9px;border-radius:15px;font-size:15px}.new-background-color[_ngcontent-%COMP%]{--background: #faefe1}\"]\n  });\n  return SessionHomePage;\n})();","map":null,"metadata":{},"sourceType":"module"}