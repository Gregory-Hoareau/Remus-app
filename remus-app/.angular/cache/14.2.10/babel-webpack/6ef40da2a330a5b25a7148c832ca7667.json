{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { Component, Input, ViewChild } from '@angular/core';\nimport { Player } from 'src/app/models/player.models';\nimport { Conversation } from 'src/app/models/conversation.model';\nimport { FormBuilder } from '@angular/forms';\nimport { PlayersService } from 'src/app/providers/players/players.service';\nimport { ModalController, IonContent } from '@ionic/angular';\nimport { Message } from 'src/app/models/message.model';\nlet SessionChatPage = class SessionChatPage {\n  //@Input() peerService: Peer2peerService;\n  constructor(formBuilder, playerServ, modalController) {\n    this.formBuilder = formBuilder;\n    this.playerServ = playerServ;\n    this.modalController = modalController;\n    this.target = new Player(undefined);\n    this.player = new Player(undefined);\n  }\n\n  closeModal() {\n    this.modalController.dismiss();\n  }\n\n  ngOnInit() {\n    this.myForm = this.formBuilder.group({\n      message: null\n    });\n    setTimeout(() => {\n      this.content.scrollToBottom(0);\n    }, 100);\n  }\n\n  send() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const message = this.myForm.getRawValue().message;\n      this.myForm.reset();\n      console.log(\"sending \", message, \"to player \", this.target);\n      this.target.conn.send({\n        message: message\n      });\n      if (!this.playerServ.isHost) this.playerServ.getPlayerByName(\"host\").conn.send({\n        message: message,\n        target: this.target.name\n      });\n      this.playerServ.getConv(this.target).addMessage(new Message(new Date(), this.playerServ.me(), message, this.target));\n      setTimeout(() => {\n        this.content.scrollToBottom(100);\n      }, 100);\n      this.getFilteredConv();\n    });\n  }\n\n  getFilteredConv() {\n    let filteredConv = new Conversation();\n    this.playerServ.playersList.forEach(player => {\n      //console.log(\"Conv avec \", player.name, this.playerServ.getConv(player));\n      if (this.playerServ.getConv(player)) filteredConv = filteredConv.concat(this.playerServ.getConv(player));\n    });\n    filteredConv = filteredConv.sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime()); //console.log(\"Conversations : \", filteredConv);\n\n    return filteredConv.filter(message => message.target == this.target\n    /*&&  message.player==this.player*/\n    ||\n    /*message.target==this.player &&*/\n    message.player == this.target);\n  }\n\n  changeTarget(event) {\n    console.log(event.target.value);\n    this.target = event.target.value;\n  }\n\n  changePlayer(event) {\n    console.log(event.target.player);\n    this.player = event.target.player;\n  }\n\n};\n\n__decorate([ViewChild(IonContent, null), __metadata(\"design:type\", IonContent)], SessionChatPage.prototype, \"content\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Player)], SessionChatPage.prototype, \"target\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Player)], SessionChatPage.prototype, \"player\", void 0);\n\nSessionChatPage = __decorate([Component({\n  selector: 'app-session-chat',\n  templateUrl: './session-chat.page.html',\n  styleUrls: ['./session-chat.page.scss']\n}), __metadata(\"design:paramtypes\", [FormBuilder, PlayersService, ModalController])], SessionChatPage);\nexport { SessionChatPage };","map":null,"metadata":{},"sourceType":"module"}