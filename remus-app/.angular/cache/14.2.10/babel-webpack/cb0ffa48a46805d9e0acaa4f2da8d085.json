{"ast":null,"code":"import { AlertController } from \"@ionic/angular\";\nimport { Player } from \"src/app/models/player.models\";\nimport { Conversation } from \"src/app/models/conversation.model\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nexport let PlayersService = /*#__PURE__*/(() => {\n  class PlayersService {\n    constructor(alertCtrl) {\n      this.alertCtrl = alertCtrl;\n      this.playersList = [];\n      this.conversations = new Map();\n      this.myPlayer = new Player(undefined);\n    }\n\n    resetPlayer() {\n      this.playersList.forEach(() => {\n        this.playersList.pop();\n      });\n    }\n\n    removePlayer(player) {\n      const id = this.playersList.indexOf(player);\n      this.playersList.splice(id, 1);\n    }\n\n    kickAlert(player) {\n      this.alertCtrl.create({\n        header: \"Voulez-vous vraiment renvoyer ce joueur ?\",\n        message: 'Vous êtes sur le point de renvoyé \"' + player.name + '\". Êtes vous sûre de votre décision ?',\n        inputs: [{\n          type: \"text\",\n          name: \"reason\",\n          value: \"Le Mj fait ce qu'il veut et vous l'avez énervé\"\n        }],\n        buttons: [{\n          text: \"Renvoyer\",\n          handler: data => {\n            player.conn.send({\n              kick: data.reason\n            });\n            player.conn.close();\n            this.removePlayer(player);\n            this.playersList.forEach(p => {\n              p.conn.send({\n                removed: player.name\n              });\n            });\n            console.log(this.playersList);\n          }\n        }, {\n          text: \"Annuler\"\n        }]\n      }).then(alert => alert.present());\n    }\n\n    getPlayerByName(name) {\n      let player;\n      this.playersList.forEach(p => {\n        console.log(p.name, \" is ? \", name);\n        if (p.name === name) player = p;\n      });\n      return player;\n    }\n\n    getPlayerById(id) {\n      let player;\n      this.playersList.forEach(p => {\n        console.log(p.conn.peer);\n\n        if (p.conn.peer == id) {\n          player = p;\n        }\n      });\n      return player;\n    }\n\n    getConns() {\n      var conns = [];\n      this.playersList.forEach(player => {\n        conns.push(player.conn);\n      });\n      return conns;\n    }\n\n    me() {\n      return this.myPlayer;\n    }\n\n    getConv(player) {\n      if (!this.conversations.get(player)) this.conversations.set(player, new Conversation());\n      return this.conversations.get(player);\n    }\n\n  }\n\n  PlayersService.ɵfac = function PlayersService_Factory(t) {\n    return new (t || PlayersService)(i0.ɵɵinject(i1.AlertController));\n  };\n\n  PlayersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PlayersService,\n    factory: PlayersService.ɵfac,\n    providedIn: \"root\"\n  });\n  return PlayersService;\n})();","map":null,"metadata":{},"sourceType":"module"}