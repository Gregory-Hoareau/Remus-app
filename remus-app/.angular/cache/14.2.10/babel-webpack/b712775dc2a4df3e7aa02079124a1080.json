{"ast":null,"code":"import { SOUNDS } from \"src/mocks/Track\";\nimport { Dice } from \"../../models/dice.model\";\nimport { DiceHistoryService } from \"../diceHistory/dice-history.service\";\nimport { MusicService } from \"../music/music.service\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../music/music.service\";\nimport * as i2 from \"../diceHistory/dice-history.service\";\nexport let DiceService = /*#__PURE__*/(() => {\n  class DiceService {\n    constructor(musicService, historyService) {\n      this.musicService = musicService;\n      this.historyService = historyService;\n      this.normalDices = true;\n      this.Normal = [];\n      this.StarWars = [];\n      this.LegendOfTheFiveRings = [];\n      this.specialGame = new Map();\n      this.Normal.push(new Dice(\"d4\", 4), new Dice(\"d6\", 6), new Dice(\"d8\", 8), new Dice(\"d10\", 10), new Dice(\"d12\", 12), new Dice(\"d20\", 20), new Dice(\"d100\", 100));\n    }\n\n    fillTheTab(value, path) {\n      const Tab = Array();\n\n      for (let i = 1; i <= value; i++) {\n        Tab.push(\"/assets/\" + path + \"/\" + i + \".png\");\n      }\n\n      return Tab;\n    }\n\n    macroLaunch(macro) {\n      if (this.normalDices !== macro.isItNormalDices) {\n        this.normalDices = macro.isItNormalDices;\n        this.typeOfDiceHasBeenChanged = true;\n      }\n\n      this.resetDices();\n      this.modifier = macro.modifier;\n      this.diceSelected = macro.dices;\n\n      for (const dice of this.diceSelected.keys()) {\n        for (let itter = 0; itter < this.diceSelected.get(dice); itter++) {\n          this.dices.push(dice.numberOfFaces);\n          this.specialDices.push(dice);\n          this.totalDiceSum += dice.numberOfFaces;\n        }\n      }\n\n      this.launchDice();\n    } //Kinda get it, change the text variable but yuk!\n    //Should make a toString function on dice array item\n\n\n    printSumDices(map) {\n      var listOfDiceAsString = \"\";\n\n      for (const dice of map.keys()) {\n        if (listOfDiceAsString === \"\") {\n          listOfDiceAsString = this.diceSelected.get(dice) + dice.name;\n        } else {\n          listOfDiceAsString = listOfDiceAsString + \" + \" + this.diceSelected.get(dice) + dice.name;\n        }\n      }\n\n      return listOfDiceAsString;\n    }\n\n    increaseDiceSum(dice, launched) {\n      if (launched === true) {\n        launched = false;\n        this.dices = [];\n        this.diceSelected = new Map();\n        this.diceSum = 0;\n        this.separetedValue = \"\";\n        this.totalDiceSum = 0;\n        this.modifResult = \"\";\n        this.modifying = false;\n        this.specialDices = [];\n        this.specialFaces = [];\n      }\n\n      this.dices.push(dice.numberOfFaces);\n      this.specialDices.push(dice);\n      this.totalDiceSum = this.totalDiceSum + dice.numberOfFaces;\n      const temp = this.diceSelected.get(dice);\n\n      if (!this.diceSelected.has(dice)) {\n        this.diceSelected.set(dice, 1);\n      } else {\n        this.diceSelected.set(dice, temp + 1);\n      }\n\n      return this.printSumDices(this.diceSelected);\n    }\n\n    resetDices() {\n      this.diceSum = 0;\n      this.dices = [];\n      this.diceSelected = new Map();\n      this.totalDiceSum = 0;\n      this.modifier = 0;\n      this.modifying = false;\n      this.separetedValue = \"\";\n      this.specialDices = [];\n      this.specialFaces = [];\n    }\n\n    launchDice(dices = this.diceSelected, modifier) {\n      var rolls = [];\n      var valuesString = \"\";\n      var roll_name = this.StringifyDice(dices);\n      var result = 0;\n      this.musicService.launchSound(SOUNDS[0]); //random rolls\n\n      dices.forEach((value, dice, _) => {\n        for (let i = 0; i < value; i++) {\n          rolls.push(dice.getRandomface());\n        }\n      }); //result\n\n      rolls.forEach(roll => {\n        result += roll;\n        valuesString += roll + \" + \";\n      });\n      valuesString = valuesString.substring(0, valuesString.length - 2); //modifier effect\n\n      if (modifier) {\n        result += modifier;\n        var modif = modifier > 0 ? `+ ${modifier}` : `${modifier}`;\n        valuesString += modif;\n        roll_name += modif;\n      }\n\n      var diceRoll = {\n        name: roll_name,\n        result: result,\n        separatedValue: valuesString,\n        modificator: modifier\n      };\n      this.historyService.addDiceRoll(diceRoll);\n      return diceRoll;\n    }\n\n    AddSelectedDice(dice) {\n      var value = this.diceSelected.get(dice);\n      if (value) this.diceSelected.set(dice, value + 1);else this.diceSelected.set(dice, 1);\n    }\n\n    StringifyDice(dice = this.diceSelected) {\n      var stringifiedDice = \"\";\n      dice.forEach((value, dice, _) => stringifiedDice += value + dice.name + \" \");\n      return stringifiedDice;\n    }\n\n  }\n\n  DiceService.ɵfac = function DiceService_Factory(t) {\n    return new (t || DiceService)(i0.ɵɵinject(i1.MusicService), i0.ɵɵinject(i2.DiceHistoryService));\n  };\n\n  DiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DiceService,\n    factory: DiceService.ɵfac,\n    providedIn: \"root\"\n  });\n  return DiceService;\n})();","map":null,"metadata":{},"sourceType":"module"}